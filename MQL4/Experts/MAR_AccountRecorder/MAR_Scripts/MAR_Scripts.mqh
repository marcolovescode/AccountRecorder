//+------------------------------------------------------------------+
//|                                                  MAR_Scripts.mqh |
//|                                          Copyright 2017, Marco Z |
//|                                       https://github.com/mazmazz |
//+------------------------------------------------------------------+
#property copyright "Copyright 2017, Marco Z"
#property link      "https://github.com/mazmazz"
#property strict

#include <MC_Common/MC_Resource.mqh>
//+------------------------------------------------------------------+

const string Schema_Orders_Mysql[] =
{
"CREATE TABLE IF NOT EXISTS enum_exn_type (id INTEGER NOT NULL UNIQUE PRIMARY KEY, name VARCHAR(64));",
"INSERT IGNORE INTO enum_exn_type VALUES (-1, 'Unspecified');",
"INSERT IGNORE INTO enum_exn_type VALUES (0, 'Other');",
"INSERT IGNORE INTO enum_exn_type VALUES (1, 'IRC 988(a)(1)(B)');",
"",
"CREATE TABLE IF NOT EXISTS enum_spt_phase (id INT PRIMARY KEY NOT NULL UNIQUE, name VARCHAR(64));",
"INSERT IGNORE INTO enum_spt_phase VALUES (-1, 'Unspecified');",
"INSERT IGNORE INTO enum_spt_phase VALUES (0, 'Other');",
"INSERT IGNORE INTO enum_spt_phase VALUES (1, 'Entry');",
"INSERT IGNORE INTO enum_spt_phase VALUES (2, 'Exit');",
"",
"CREATE TABLE IF NOT EXISTS enum_spt_subtype (id INT PRIMARY KEY NOT NULL UNIQUE, name VARCHAR(64));",
"INSERT IGNORE INTO enum_spt_subtype VALUES (-1, 'Unspecified');",
"INSERT IGNORE INTO enum_spt_subtype VALUES (0, 'Other');",
"INSERT IGNORE INTO enum_spt_subtype VALUES (1, 'Commission');",
"INSERT IGNORE INTO enum_spt_subtype VALUES (2, 'Swap');",
"INSERT IGNORE INTO enum_spt_subtype VALUES (3, 'Tax');",
"INSERT IGNORE INTO enum_spt_subtype VALUES (4, 'Deposit');",
"INSERT IGNORE INTO enum_spt_subtype VALUES (5, 'Withdrawal');",
"INSERT IGNORE INTO enum_spt_subtype VALUES (6, 'Expense');",
"INSERT IGNORE INTO enum_spt_subtype VALUES (7, 'Rebate');",
"",
"CREATE TABLE IF NOT EXISTS enum_spt_type (id INT PRIMARY KEY NOT NULL UNIQUE, name VARCHAR(64));",
"INSERT IGNORE INTO enum_spt_type VALUES (-1, 'Unspecified');",
"INSERT IGNORE INTO enum_spt_type VALUES (0, 'Other');",
"INSERT IGNORE INTO enum_spt_type VALUES (1, 'Gross');",
"INSERT IGNORE INTO enum_spt_type VALUES (2, 'Fee');",
"INSERT IGNORE INTO enum_spt_type VALUES (3, 'Adjustment');",
"",
"CREATE TABLE IF NOT EXISTS enum_txn_type (id INT PRIMARY KEY NOT NULL UNIQUE, name VARCHAR(64));",
"INSERT IGNORE INTO enum_txn_type VALUES (-1, 'Unspecified');",
"INSERT IGNORE INTO enum_txn_type VALUES (0, 'Other');",
"INSERT IGNORE INTO enum_txn_type VALUES (1, 'Short');",
"INSERT IGNORE INTO enum_txn_type VALUES (2, 'Long');",
"INSERT IGNORE INTO enum_txn_type VALUES (3, 'Balance');",
"",
"CREATE TABLE IF NOT EXISTS enum_act_mode (id INT PRIMARY KEY UNIQUE NOT NULL, name VARCHAR(64));",
"INSERT IGNORE INTO enum_act_mode VALUES(-1, 'Unspecified');",
"INSERT IGNORE INTO enum_act_mode VALUES(0, 'Demo');",
"INSERT IGNORE INTO enum_act_mode VALUES(1, 'Contest');",
"INSERT IGNORE INTO enum_act_mode VALUES(2, 'Real');",
"",
"CREATE TABLE IF NOT EXISTS currency (uuid VARCHAR(36) PRIMARY KEY UNIQUE NOT NULL, name VARCHAR(12) NOT NULL, fraction DOUBLE NOT NULL DEFAULT (1));",
"",
"CREATE TABLE IF NOT EXISTS accounts (uuid VARCHAR(36) PRIMARY KEY UNIQUE NOT NULL, cny_uuid VARCHAR(36) NOT NULL, num INT NOT NULL, mode INT, name VARCHAR(64), server VARCHAR(64), company VARCHAR(64));",
"",
"CREATE TABLE IF NOT EXISTS elections (uuid VARCHAR(36) PRIMARY KEY UNIQUE NOT NULL, txn_uuid VARCHAR(36) NOT NULL, type INTEGER NOT NULL DEFAULT (- 1), active BOOLEAN NOT NULL DEFAULT false, made_datetime DATETIME NOT NULL, recorded_datetime DATETIME NOT NULL);",
"",
"CREATE TABLE IF NOT EXISTS splits (uuid VARCHAR(36) PRIMARY KEY UNIQUE NOT NULL, txn_uuid VARCHAR(36) NOT NULL, cny_uuid VARCHAR(36) NOT NULL, phase INTEGER NOT NULL DEFAULT (- 1), type INTEGER NOT NULL DEFAULT (- 1), subtype INTEGER NOT NULL DEFAULT (- 1), amount DOUBLE NOT NULL, comment VARCHAR);",
"",
"CREATE TABLE IF NOT EXISTS transactions (uuid VARCHAR(36) PRIMARY KEY UNIQUE NOT NULL, act_uuid VARCHAR(36) NOT NULL, type INTEGER NOT NULL DEFAULT (- 1), num INT NOT NULL, comment VARCHAR, magic INTEGER DEFAULT (- 1) NOT NULL, entry_datetime DATETIME NOT NULL);",
"",
"CREATE TABLE IF NOT EXISTS txn_orders (txn_uuid VARCHAR(36) PRIMARY KEY UNIQUE NOT NULL, symbol VARCHAR(12) NOT NULL, lots DOUBLE NOT NULL, exit_datetime DATETIME, entry_pips DOUBLE NOT NULL, exit_pips DOUBLE);",
"",
"CREATE TABLE IF NOT EXISTS txn_orders_exit (txn_uuid VARCHAR(36) PRIMARY KEY UNIQUE NOT NULL, exit_datetime DATETIME NOT NULL, exit_pips DOUBLE NOT NULL);",
};

const string Schema_Orders_Postgres[] =
{
"CREATE TABLE IF NOT EXISTS enum_exn_type (id INTEGER NOT NULL UNIQUE PRIMARY KEY, name TEXT);",
"INSERT INTO enum_exn_type VALUES (-1, 'Unspecified')  ON CONFLICT DO NOTHING;",
"INSERT INTO enum_exn_type VALUES (0, 'Other')  ON CONFLICT DO NOTHING;",
"INSERT INTO enum_exn_type VALUES (1, 'IRC 988(a)(1)(B)')  ON CONFLICT DO NOTHING;",
"",
"CREATE TABLE IF NOT EXISTS enum_spt_phase (id INT PRIMARY KEY NOT NULL UNIQUE, name TEXT);",
"INSERT INTO enum_spt_phase VALUES (-1, 'Unspecified')  ON CONFLICT DO NOTHING;",
"INSERT INTO enum_spt_phase VALUES (0, 'Other')  ON CONFLICT DO NOTHING;",
"INSERT INTO enum_spt_phase VALUES (1, 'Entry')  ON CONFLICT DO NOTHING;",
"INSERT INTO enum_spt_phase VALUES (2, 'Exit')  ON CONFLICT DO NOTHING;",
"",
"CREATE TABLE IF NOT EXISTS enum_spt_subtype (id INT PRIMARY KEY NOT NULL UNIQUE, name TEXT);",
"INSERT INTO enum_spt_subtype VALUES (-1, 'Unspecified')  ON CONFLICT DO NOTHING;",
"INSERT INTO enum_spt_subtype VALUES (0, 'Other')  ON CONFLICT DO NOTHING;",
"INSERT INTO enum_spt_subtype VALUES (1, 'Commission')  ON CONFLICT DO NOTHING;",
"INSERT INTO enum_spt_subtype VALUES (2, 'Swap')  ON CONFLICT DO NOTHING;",
"INSERT INTO enum_spt_subtype VALUES (3, 'Tax')  ON CONFLICT DO NOTHING;",
"INSERT INTO enum_spt_subtype VALUES (4, 'Deposit')  ON CONFLICT DO NOTHING;",
"INSERT INTO enum_spt_subtype VALUES (5, 'Withdrawal')  ON CONFLICT DO NOTHING;",
"INSERT INTO enum_spt_subtype VALUES (6, 'Expense')  ON CONFLICT DO NOTHING;",
"INSERT INTO enum_spt_subtype VALUES (7, 'Rebate')  ON CONFLICT DO NOTHING;",
"",
"CREATE TABLE IF NOT EXISTS enum_spt_type (id INT PRIMARY KEY NOT NULL UNIQUE, name TEXT);",
"INSERT INTO enum_spt_type VALUES (-1, 'Unspecified')  ON CONFLICT DO NOTHING;",
"INSERT INTO enum_spt_type VALUES (0, 'Other')  ON CONFLICT DO NOTHING;",
"INSERT INTO enum_spt_type VALUES (1, 'Gross')  ON CONFLICT DO NOTHING;",
"INSERT INTO enum_spt_type VALUES (2, 'Fee')  ON CONFLICT DO NOTHING;",
"INSERT INTO enum_spt_type VALUES (3, 'Adjustment')  ON CONFLICT DO NOTHING;",
"",
"CREATE TABLE IF NOT EXISTS enum_txn_type (id INT PRIMARY KEY NOT NULL UNIQUE, name TEXT);",
"INSERT INTO enum_txn_type VALUES (-1, 'Unspecified')  ON CONFLICT DO NOTHING;",
"INSERT INTO enum_txn_type VALUES (0, 'Long')  ON CONFLICT DO NOTHING;",
"INSERT INTO enum_txn_type VALUES (1, 'Short')  ON CONFLICT DO NOTHING;",
"INSERT INTO enum_txn_type VALUES (2, 'Buy Limit')  ON CONFLICT DO NOTHING;",
"INSERT INTO enum_txn_type VALUES (3, 'Buy Stop')  ON CONFLICT DO NOTHING;",
"INSERT INTO enum_txn_type VALUES (4, 'Sell Limit')  ON CONFLICT DO NOTHING;",
"INSERT INTO enum_txn_type VALUES (5, 'Sell Stop')  ON CONFLICT DO NOTHING;",
"INSERT INTO enum_txn_type VALUES (6, 'Balance')  ON CONFLICT DO NOTHING;",
"",
"CREATE TABLE IF NOT EXISTS enum_act_mode (id INT PRIMARY KEY UNIQUE NOT NULL, name TEXT);",
"INSERT INTO enum_act_mode VALUES(-1, 'Unspecified') ON CONFLICT DO NOTHING;",
"INSERT INTO enum_act_mode VALUES(0, 'Demo') ON CONFLICT DO NOTHING;",
"INSERT INTO enum_act_mode VALUES(1, 'Contest') ON CONFLICT DO NOTHING;",
"INSERT INTO enum_act_mode VALUES(2, 'Real') ON CONFLICT DO NOTHING;",
"",
"CREATE TABLE IF NOT EXISTS enum_act_margin_so_mode (id INT PRIMARY KEY UNIQUE NOT NULL, name TEXT);",
"INSERT INTO enum_act_margin_so_mode VALUES(-1, 'Unspecified') ON CONFLICT DO NOTHING;",
"INSERT INTO enum_act_margin_so_mode VALUES(0, 'Percent') ON CONFLICT DO NOTHING;",
"INSERT INTO enum_act_margin_so_mode VALUES(1, 'Money') ON CONFLICT DO NOTHING;",
"",
"CREATE TABLE IF NOT EXISTS currency (uuid TEXT PRIMARY KEY UNIQUE NOT NULL, name TEXT NOT NULL, fraction NUMERIC NOT NULL DEFAULT (1));",
"",
"CREATE TABLE IF NOT EXISTS accounts (uuid TEXT PRIMARY KEY UNIQUE NOT NULL, cny_uuid TEXT NOT NULL, num INT NOT NULL, mode INT, name TEXT, server TEXT, company TEXT);",
"",
"CREATE TABLE IF NOT EXISTS elections (uuid TEXT PRIMARY KEY UNIQUE NOT NULL, txn_uuid TEXT NOT NULL, type INTEGER NOT NULL DEFAULT (- 1), active BOOLEAN NOT NULL DEFAULT FALSE, made_datetime TIMESTAMP WITH TIME ZONE NOT NULL, recorded_datetime TIMESTAMP WITH TIME ZONE NOT NULL);",
"",
"CREATE TABLE IF NOT EXISTS splits (uuid TEXT PRIMARY KEY UNIQUE NOT NULL, txn_uuid TEXT NOT NULL, cny_uuid TEXT NOT NULL, phase INTEGER NOT NULL DEFAULT (- 1), type INTEGER NOT NULL DEFAULT (- 1), subtype INTEGER NOT NULL DEFAULT (- 1), amount NUMERIC NOT NULL, comment TEXT);",
"",
"CREATE TABLE IF NOT EXISTS transactions (uuid TEXT PRIMARY KEY UNIQUE NOT NULL, act_uuid TEXT NOT NULL, type INTEGER NOT NULL DEFAULT (- 1), num INT NOT NULL, comment TEXT, magic INTEGER DEFAULT (- 1) NOT NULL, entry_datetime TIMESTAMP WITH TIME ZONE NOT NULL);",
"",
"CREATE TABLE IF NOT EXISTS txn_orders (txn_uuid TEXT PRIMARY KEY UNIQUE NOT NULL, symbol TEXT NOT NULL, lots NUMERIC NOT NULL, entry_price NUMERIC NOT NULL, entry_stoploss NUMERIC NOT NULL DEFAULT (0), entry_takeprofit NUMERIC NOT NULL DEFAULT (0));",
"",
"CREATE TABLE IF NOT EXISTS txn_orders_exit (txn_uuid TEXT PRIMARY KEY UNIQUE NOT NULL, exit_datetime TIMESTAMP WITH TIME ZONE NOT NULL, exit_lots NUMERIC, exit_price NUMERIC NOT NULL, exit_stoploss NUMERIC NOT NULL DEFAULT (0), exit_takeprofit NUMERIC NOT NULL DEFAULT (0), exit_comment TEXT);",
"",
"CREATE TABLE IF NOT EXISTS act_equity (uuid TEXT PRIMARY KEY UNIQUE NOT NULL, act_uuid TEXT NOT NULL, record_datetime TIMESTAMP WITH TIME ZONE NOT NULL, leverage INTEGER, margin_so_mode INTEGER, margin_so_call NUMERIC, margin_so_so NUMERIC, balance NUMERIC, equity NUMERIC, credit NUMERIC, margin NUMERIC);",
"",
"CREATE TABLE IF NOT EXISTS txn_orders_equity (txn_uuid TEXT NOT NULL, eqt_uuid TEXT NOT NULL, lots NUMERIC, price NUMERIC, stoploss NUMERIC, takeprofit NUMERIC, commission NUMERIC, swap NUMERIC, gross NUMERIC, PRIMARY KEY (txn_uuid, eqt_uuid));",
};

const string Schema_Orders_Sqlite[] =
{
"CREATE TABLE IF NOT EXISTS enum_exn_type (id INTEGER NOT NULL UNIQUE PRIMARY KEY, name TEXT);",
"INSERT OR IGNORE INTO enum_exn_type VALUES (-1, 'Unspecified');",
"INSERT OR IGNORE INTO enum_exn_type VALUES (0, 'Other');",
"INSERT OR IGNORE INTO enum_exn_type VALUES (1, 'IRC 988(a)(1)(B)');",
"",
"CREATE TABLE IF NOT EXISTS enum_spt_phase (id INT PRIMARY KEY NOT NULL UNIQUE, name TEXT);",
"INSERT OR IGNORE INTO enum_spt_phase VALUES (-1, 'Unspecified');",
"INSERT OR IGNORE INTO enum_spt_phase VALUES (0, 'Other');",
"INSERT OR IGNORE INTO enum_spt_phase VALUES (1, 'Entry');",
"INSERT OR IGNORE INTO enum_spt_phase VALUES (2, 'Exit');",
"",
"CREATE TABLE IF NOT EXISTS enum_spt_subtype (id INT PRIMARY KEY NOT NULL UNIQUE, name TEXT);",
"INSERT OR IGNORE INTO enum_spt_subtype VALUES (-1, 'Unspecified');",
"INSERT OR IGNORE INTO enum_spt_subtype VALUES (0, 'Other');",
"INSERT OR IGNORE INTO enum_spt_subtype VALUES (1, 'Commission');",
"INSERT OR IGNORE INTO enum_spt_subtype VALUES (2, 'Swap');",
"INSERT OR IGNORE INTO enum_spt_subtype VALUES (3, 'Tax');",
"INSERT OR IGNORE INTO enum_spt_subtype VALUES (4, 'Deposit');",
"INSERT OR IGNORE INTO enum_spt_subtype VALUES (5, 'Withdrawal');",
"INSERT OR IGNORE INTO enum_spt_subtype VALUES (6, 'Expense');",
"INSERT OR IGNORE INTO enum_spt_subtype VALUES (7, 'Rebate');",
"",
"CREATE TABLE IF NOT EXISTS enum_spt_type (id INT PRIMARY KEY NOT NULL UNIQUE, name TEXT);",
"INSERT OR IGNORE INTO enum_spt_type VALUES (-1, 'Unspecified');",
"INSERT OR IGNORE INTO enum_spt_type VALUES (0, 'Other');",
"INSERT OR IGNORE INTO enum_spt_type VALUES (1, 'Gross');",
"INSERT OR IGNORE INTO enum_spt_type VALUES (2, 'Fee');",
"INSERT OR IGNORE INTO enum_spt_type VALUES (3, 'Adjustment');",
"",
"CREATE TABLE IF NOT EXISTS enum_txn_type (id INT PRIMARY KEY NOT NULL UNIQUE, name TEXT);",
"INSERT OR IGNORE INTO enum_txn_type VALUES (-1, 'Unspecified');",
"INSERT OR IGNORE INTO enum_txn_type VALUES (0, 'Long');",
"INSERT OR IGNORE INTO enum_txn_type VALUES (1, 'Short');",
"INSERT OR IGNORE INTO enum_txn_type VALUES (2, 'Buy Limit');",
"INSERT OR IGNORE INTO enum_txn_type VALUES (3, 'Buy Stop');",
"INSERT OR IGNORE INTO enum_txn_type VALUES (4, 'Sell Limit');",
"INSERT OR IGNORE INTO enum_txn_type VALUES (5, 'Sell Stop');",
"INSERT OR IGNORE INTO enum_txn_type VALUES (6, 'Balance');",
"",
"CREATE TABLE IF NOT EXISTS enum_act_mode (id INT PRIMARY KEY UNIQUE NOT NULL, name TEXT);",
"INSERT OR IGNORE INTO enum_act_mode VALUES(-1, 'Unspecified');",
"INSERT OR IGNORE INTO enum_act_mode VALUES(0, 'Demo');",
"INSERT OR IGNORE INTO enum_act_mode VALUES(1, 'Contest');",
"INSERT OR IGNORE INTO enum_act_mode VALUES(2, 'Real');",
"",
"CREATE TABLE IF NOT EXISTS enum_act_margin_so_mode (id INT PRIMARY KEY UNIQUE NOT NULL, name TEXT);",
"INSERT OR IGNORE INTO enum_act_margin_so_mode VALUES(-1, 'Unspecified');",
"INSERT OR IGNORE INTO enum_act_margin_so_mode VALUES(0, 'Percent');",
"INSERT OR IGNORE INTO enum_act_margin_so_mode VALUES(1, 'Money');",
"",
"CREATE TABLE IF NOT EXISTS currency (uuid TEXT PRIMARY KEY UNIQUE NOT NULL, name TEXT NOT NULL, fraction DOUBLE NOT NULL DEFAULT (1));",
"",
"CREATE TABLE IF NOT EXISTS accounts (uuid TEXT PRIMARY KEY UNIQUE NOT NULL, cny_uuid TEXT NOT NULL, num INT NOT NULL, mode INT, name TEXT, server TEXT, company TEXT);",
"",
"CREATE TABLE IF NOT EXISTS elections (uuid TEXT PRIMARY KEY UNIQUE NOT NULL, txn_uuid TEXT NOT NULL, type INTEGER NOT NULL DEFAULT (- 1), active BOOLEAN NOT NULL DEFAULT (0), made_datetime DATETIME NOT NULL, recorded_datetime DATETIME NOT NULL);",
"",
"CREATE TABLE IF NOT EXISTS splits (uuid TEXT PRIMARY KEY UNIQUE NOT NULL, txn_uuid TEXT NOT NULL, cny_uuid TEXT NOT NULL, phase INTEGER NOT NULL DEFAULT (- 1), type INTEGER NOT NULL DEFAULT (- 1), subtype INTEGER NOT NULL DEFAULT (- 1), amount DOUBLE NOT NULL, comment TEXT);",
"",
"CREATE TABLE IF NOT EXISTS transactions (uuid TEXT PRIMARY KEY UNIQUE NOT NULL, act_uuid TEXT NOT NULL, type INTEGER NOT NULL DEFAULT (- 1), num INT NOT NULL, comment TEXT, magic INTEGER DEFAULT (- 1) NOT NULL, entry_datetime DATETIME NOT NULL);",
"",
"CREATE TABLE IF NOT EXISTS txn_orders (txn_uuid TEXT PRIMARY KEY UNIQUE NOT NULL, symbol TEXT NOT NULL, lots DOUBLE NOT NULL, entry_price DOUBLE NOT NULL, entry_stoploss DOUBLE NOT NULL DEFAULT (0), entry_takeprofit DOUBLE NOT NULL DEFAULT (0));",
"",
"CREATE TABLE IF NOT EXISTS txn_orders_exit (txn_uuid TEXT PRIMARY KEY UNIQUE NOT NULL, exit_datetime DATETIME NOT NULL, exit_lots DOUBLE, exit_price DOUBLE NOT NULL, exit_stoploss DOUBLE NOT NULL DEFAULT (0), exit_takeprofit DOUBLE NOT NULL DEFAULT (0), exit_comment TEXT);",
"",
"CREATE TABLE IF NOT EXISTS act_equity (uuid TEXT PRIMARY KEY UNIQUE NOT NULL, act_uuid TEXT NOT NULL, record_datetime DATETIME NOT NULL, leverage INTEGER, margin_so_mode INTEGER, margin_so_call DOUBLE, margin_so_so DOUBLE, balance DOUBLE, equity DOUBLE, credit DOUBLE, margin DOUBLE);",
"",
"CREATE TABLE IF NOT EXISTS txn_orders_equity (txn_uuid TEXT NOT NULL, eqt_uuid TEXT NOT NULL, lots DOUBLE, price DOUBLE, stoploss DOUBLE, takeprofit DOUBLE, commission DOUBLE, swap DOUBLE, gross DOUBLE, PRIMARY KEY (txn_uuid, eqt_uuid));",
};

void MAR_LoadScripts() {
	ResourceMan.loadTextResource("MAR_Scripts/Schema_Orders_Mysql.sql", Schema_Orders_Mysql);
	ResourceMan.loadTextResource("MAR_Scripts/Schema_Orders_Postgres.sql", Schema_Orders_Postgres);
	ResourceMan.loadTextResource("MAR_Scripts/Schema_Orders_Sqlite.sql", Schema_Orders_Sqlite);
}
